(lex.add.entry '("elle_PRO:per" "PRO:per" ((("eh" "l") 0))))
(lex.add.entry '("doit_VER" "VER" ((("d" "w" "a") 0))))
(lex.add.entry '("être_VER" "VER" ((("eh") 0))))
(lex.add.entry '("ouverte_VER" "VER" (((t rh "u") 0) (("v" "eh" "rh" "t") 0))))
(lex.add.entry '("réunir_VER" "VER" ((("rh" "e") 0) (("y") 0) (("n" "i" "rh") 0))))
(lex.add.entry '("et_CON" "CON" ((("e") 0))))
(lex.add.entry '("non_ADV" "ADV" ((("n" "ohn") 0))))
(lex.add.entry '("divisé_VER" VER ((("d" "i") 0) (("v" "i") 0) (("z" "e") 0))))
(lex.add.entry '("ou_CON" "CON" ((("u") 0))))
(lex.add.entry '("exclure_VER" "VER" ((("eh" "k" s) 0) (("k" "l" "y" "rh") 0))))

(set! never_exception_list (append (list "doit" ) never_exception_list_default))
(dSayText "Elle doit être ouverte, réunir, et non diviser ou exclure.") ; neut_parl_s03_0118
